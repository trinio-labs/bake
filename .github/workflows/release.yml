# Copyright 2022-2023, axodotdev
# SPDX-License-Identifier: MIT or Apache-2.0
#
# CI that:
#
# * checks for a Git Tag that looks like a release
# * builds artifacts with cargo-dist (archives, installers, hashes)
# * uploads those artifacts to temporary workflow zip
# * on success, uploads the artifacts to a Github Release
#
# Note that the Github Release will be created with a generated
# title/body based on your changelogs.

name: Release

permissions:
  contents: write

# This task will run whenever you push a git tag that looks like a version
# like "1.0.0", "v0.1.0-prerelease.1", "my-app/0.1.0", "releases/v1.0.0", etc.
# Various formats will be parsed into a VERSION and an optional PACKAGE_NAME, where
# PACKAGE_NAME must be the name of a Cargo package in your workspace, and VERSION
# must be a Cargo-style SemVer Version (must have at least major.minor.patch).
#
# If PACKAGE_NAME is specified, then the announcement will be for that
# package (erroring out if it doesn't have the given version or isn't cargo-dist-able).
#
# If PACKAGE_NAME isn't specified, then the announcement will be for all
# (cargo-dist-able) packages in the workspace with that version (this mode is
# intended for workspaces with only one dist-able package, or with all dist-able
# packages versioned/released in lockstep).
#
# If you push multiple tags at once, separate instances of this workflow will
# spin up, creating an independent announcement for each one. However Github
# will hard limit this to 3 tags per commit, as it will assume more tags is a
# mistake.
#
# If there's a prerelease-style suffix to the version, then the release(s)
# will be marked as a prerelease.
on:
  push:
    branches:
      - main
    tags:
      - "**[0-9]+.[0-9]+.[0-9]+*"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
      - run: cargo clippy --all-targets -- -D warnings
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
      - run: cargo test
  publish:
    name: Publish
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
      - run: cargo publish
  release:
    name: Release
    needs: [lint, test, publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ocavue/changelog-parser-action@v1
        id: changelog
      - uses: ncipollo/release-action@v1
        with:
          body: |
            # Release Notes

            ${{ steps.changelog.outputs.latestBody }}

            ## Installing Bake [${{ steps.changelog.outputs.latestVersion }}](https://github.com/axodotdev/bake/releases/tag/${{ steps.changelog.outputs.latestVersion }})

            ### MacOS
            ```bash
            brew install bake
            ```

            ### Cargo
            ```bash
            cargo install bake-cli
            ```
